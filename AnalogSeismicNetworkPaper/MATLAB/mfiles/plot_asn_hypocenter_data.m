%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/gt/src/AnalogSeismicNetworkPaper/hypocenters_duplicates_removed.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/02/20 02:20:29

%% Initialize variables.
filename = '/Users/gt/src/AnalogSeismicNetworkPaper/hypocenters_duplicates_removed.csv';
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column1: double (%f)
%	column2: text (%q)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%q%f%f%f%f%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
tbl = table(dataArray{1:end-1}, 'VariableNames', {'index','otime','lat','lon','depth','mag','quality'});

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% added by glenn
close all
cobj=Catalog(datenum(tbl.otime), tbl.lon, tbl.lat, tbl.depth, tbl.mag);


%%
open contourmap_ASN_sites.fig
hold on
a1 = find(tbl.quality=='A1');
b1 = find(tbl.quality=='B1');
c1 = find(tbl.quality=='C1');
cobja1=cobj.subset('indices',a1);
cobjb1=cobj.subset('indices',b1);
cobjc1=cobj.subset('indices',c1);
symsize = get_symsize(cobj);
c1symsize = get_symsize(cobjc1); 
b1symsize = get_symsize(cobjb1); 
a1symsize = get_symsize(cobja1); 

% scatter(-cobj.lon, cobj.lat, 5*(cobj.mag+1.5),'k')
% scatter(-cobj.lon(c1), cobj.lat(c1), 5*(cobj.mag(c1)+1.5),'r')
% scatter(-cobj.lon(b1), cobj.lat(b1), 5*(cobj.mag(b1)+1.5),'y')
% scatter(-cobj.lon(a1), cobj.lat(a1), 5*(cobj.mag(a1)+1.5),'g')
sg1=scatter(-cobj.lon, cobj.lat, symsize,'k','DisplayName','D')
sg2=scatter(-cobjc1.lon, cobjc1.lat, c1symsize,'r','DisplayName','C')
sg3=scatter(-cobjb1.lon, cobjb1.lat, b1symsize,'y','DisplayName','B')
sg4=scatter(-cobja1.lon, cobja1.lat, a1symsize,'g','DisplayName','A')
hold off
lgd=legend([sg4 sg3 sg2 sg1]);
lgd.FontSize = 14;
lgd.Title.String = 'Quality';
saveas(gcf,'asn_epicenters.eps','epsc')

%%
figure
cobj.plot_time()
cobja1=cobj.subset('indices',a1);
cobjb1=cobj.subset('indices',b1);
cobjc1=cobj.subset('indices',c1);
c1symsize = get_symsize(cobjc1); 
b1symsize = get_symsize(cobjb1); 
a1symsize = get_symsize(cobja1); 

subplot(2,1,1);
hold on
scatter(cobjc1.otime, cobjc1.depth, c1symsize, 'r');
scatter(cobjb1.otime, cobjb1.depth, b1symsize, 'y');
scatter(cobja1.otime, cobja1.depth, a1symsize, 'g');
set(gca,'YLim',[-2 20])
hold off

subplot(2,1,2);
hold on
scatter(cobjc1.otime, cobjc1.mag, c1symsize, 'r');
scatter(cobjb1.otime, cobjb1.mag, b1symsize, 'y');
scatter(cobja1.otime, cobja1.mag, a1symsize, 'g');
set(gca,'YLim',[-1.5 2.6])
saveas(gcf,'asn_depthmag_vs_time.eps','epsc')

%%
cobj.bvalue()
saveas(gcf,'asn_bvalues.eps','epsc')